// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-init/release/resource"
)

type FakeResource struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	FingerprintStub        func() string
	fingerprintMutex       sync.RWMutex
	fingerprintArgsForCall []struct{}
	fingerprintReturns     struct {
		result1 string
	}
	ArchivePathStub        func() string
	archivePathMutex       sync.RWMutex
	archivePathArgsForCall []struct{}
	archivePathReturns     struct {
		result1 string
	}
	ArchiveSHA1Stub        func() string
	archiveSHA1Mutex       sync.RWMutex
	archiveSHA1ArgsForCall []struct{}
	archiveSHA1Returns     struct {
		result1 string
	}
	BuildStub        func(dev, final resource.ArchiveIndex) error
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		dev   resource.ArchiveIndex
		final resource.ArchiveIndex
	}
	buildReturns struct {
		result1 error
	}
	FinalizeStub        func(final resource.ArchiveIndex) error
	finalizeMutex       sync.RWMutex
	finalizeArgsForCall []struct {
		final resource.ArchiveIndex
	}
	finalizeReturns struct {
		result1 error
	}
}

func (fake *FakeResource) Name() string {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	} else {
		return fake.nameReturns.result1
	}
}

func (fake *FakeResource) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeResource) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeResource) Fingerprint() string {
	fake.fingerprintMutex.Lock()
	fake.fingerprintArgsForCall = append(fake.fingerprintArgsForCall, struct{}{})
	fake.fingerprintMutex.Unlock()
	if fake.FingerprintStub != nil {
		return fake.FingerprintStub()
	} else {
		return fake.fingerprintReturns.result1
	}
}

func (fake *FakeResource) FingerprintCallCount() int {
	fake.fingerprintMutex.RLock()
	defer fake.fingerprintMutex.RUnlock()
	return len(fake.fingerprintArgsForCall)
}

func (fake *FakeResource) FingerprintReturns(result1 string) {
	fake.FingerprintStub = nil
	fake.fingerprintReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeResource) ArchivePath() string {
	fake.archivePathMutex.Lock()
	fake.archivePathArgsForCall = append(fake.archivePathArgsForCall, struct{}{})
	fake.archivePathMutex.Unlock()
	if fake.ArchivePathStub != nil {
		return fake.ArchivePathStub()
	} else {
		return fake.archivePathReturns.result1
	}
}

func (fake *FakeResource) ArchivePathCallCount() int {
	fake.archivePathMutex.RLock()
	defer fake.archivePathMutex.RUnlock()
	return len(fake.archivePathArgsForCall)
}

func (fake *FakeResource) ArchivePathReturns(result1 string) {
	fake.ArchivePathStub = nil
	fake.archivePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeResource) ArchiveSHA1() string {
	fake.archiveSHA1Mutex.Lock()
	fake.archiveSHA1ArgsForCall = append(fake.archiveSHA1ArgsForCall, struct{}{})
	fake.archiveSHA1Mutex.Unlock()
	if fake.ArchiveSHA1Stub != nil {
		return fake.ArchiveSHA1Stub()
	} else {
		return fake.archiveSHA1Returns.result1
	}
}

func (fake *FakeResource) ArchiveSHA1CallCount() int {
	fake.archiveSHA1Mutex.RLock()
	defer fake.archiveSHA1Mutex.RUnlock()
	return len(fake.archiveSHA1ArgsForCall)
}

func (fake *FakeResource) ArchiveSHA1Returns(result1 string) {
	fake.ArchiveSHA1Stub = nil
	fake.archiveSHA1Returns = struct {
		result1 string
	}{result1}
}

func (fake *FakeResource) Build(dev resource.ArchiveIndex, final resource.ArchiveIndex) error {
	fake.buildMutex.Lock()
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		dev   resource.ArchiveIndex
		final resource.ArchiveIndex
	}{dev, final})
	fake.buildMutex.Unlock()
	if fake.BuildStub != nil {
		return fake.BuildStub(dev, final)
	} else {
		return fake.buildReturns.result1
	}
}

func (fake *FakeResource) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakeResource) BuildArgsForCall(i int) (resource.ArchiveIndex, resource.ArchiveIndex) {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return fake.buildArgsForCall[i].dev, fake.buildArgsForCall[i].final
}

func (fake *FakeResource) BuildReturns(result1 error) {
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResource) Finalize(final resource.ArchiveIndex) error {
	fake.finalizeMutex.Lock()
	fake.finalizeArgsForCall = append(fake.finalizeArgsForCall, struct {
		final resource.ArchiveIndex
	}{final})
	fake.finalizeMutex.Unlock()
	if fake.FinalizeStub != nil {
		return fake.FinalizeStub(final)
	} else {
		return fake.finalizeReturns.result1
	}
}

func (fake *FakeResource) FinalizeCallCount() int {
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	return len(fake.finalizeArgsForCall)
}

func (fake *FakeResource) FinalizeArgsForCall(i int) resource.ArchiveIndex {
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	return fake.finalizeArgsForCall[i].final
}

func (fake *FakeResource) FinalizeReturns(result1 error) {
	fake.FinalizeStub = nil
	fake.finalizeReturns = struct {
		result1 error
	}{result1}
}

var _ resource.Resource = new(FakeResource)
