// This file was generated by counterfeiter
package cloudfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/cloud"
)

type FakeCPICmdRunner struct {
	RunStub        func(context cloud.CmdContext, method string, args ...interface{}) (cloud.CmdOutput, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		context cloud.CmdContext
		method  string
		args    []interface{}
	}
	runReturns struct {
		result1 cloud.CmdOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCPICmdRunner) Run(context cloud.CmdContext, method string, args ...interface{}) (cloud.CmdOutput, error) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		context cloud.CmdContext
		method  string
		args    []interface{}
	}{context, method, args})
	fake.recordInvocation("Run", []interface{}{context, method, args})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(context, method, args...)
	} else {
		return fake.runReturns.result1, fake.runReturns.result2
	}
}

func (fake *FakeCPICmdRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeCPICmdRunner) RunArgsForCall(i int) (cloud.CmdContext, string, []interface{}) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].context, fake.runArgsForCall[i].method, fake.runArgsForCall[i].args
}

func (fake *FakeCPICmdRunner) RunReturns(result1 cloud.CmdOutput, result2 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 cloud.CmdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCPICmdRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCPICmdRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloud.CPICmdRunner = new(FakeCPICmdRunner)
