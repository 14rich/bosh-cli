// This file was generated by counterfeiter
package cloudfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/cloud"
	"github.com/cloudfoundry/bosh-utils/property"
)

type FakeCloud struct {
	CreateStemcellStub        func(imagePath string, cloudProperties property.Map) (stemcellCID string, err error)
	createStemcellMutex       sync.RWMutex
	createStemcellArgsForCall []struct {
		imagePath       string
		cloudProperties property.Map
	}
	createStemcellReturns struct {
		result1 string
		result2 error
	}
	DeleteStemcellStub        func(stemcellCID string) error
	deleteStemcellMutex       sync.RWMutex
	deleteStemcellArgsForCall []struct {
		stemcellCID string
	}
	deleteStemcellReturns struct {
		result1 error
	}
	HasVMStub        func(vmCID string) (bool, error)
	hasVMMutex       sync.RWMutex
	hasVMArgsForCall []struct {
		vmCID string
	}
	hasVMReturns struct {
		result1 bool
		result2 error
	}
	CreateVMStub        func(agentID string, stemcellCID string, cloudProperties property.Map, networksInterfaces map[string]property.Map, env property.Map) (vmCID string, err error)
	createVMMutex       sync.RWMutex
	createVMArgsForCall []struct {
		agentID            string
		stemcellCID        string
		cloudProperties    property.Map
		networksInterfaces map[string]property.Map
		env                property.Map
	}
	createVMReturns struct {
		result1 string
		result2 error
	}
	SetVMMetadataStub        func(cmCID string, metadata cloud.VMMetadata) error
	setVMMetadataMutex       sync.RWMutex
	setVMMetadataArgsForCall []struct {
		cmCID    string
		metadata cloud.VMMetadata
	}
	setVMMetadataReturns struct {
		result1 error
	}
	DeleteVMStub        func(vmCID string) error
	deleteVMMutex       sync.RWMutex
	deleteVMArgsForCall []struct {
		vmCID string
	}
	deleteVMReturns struct {
		result1 error
	}
	CreateDiskStub        func(size int, cloudProperties property.Map, vmCID string) (diskCID string, err error)
	createDiskMutex       sync.RWMutex
	createDiskArgsForCall []struct {
		size            int
		cloudProperties property.Map
		vmCID           string
	}
	createDiskReturns struct {
		result1 string
		result2 error
	}
	AttachDiskStub        func(vmCID, diskCID string) error
	attachDiskMutex       sync.RWMutex
	attachDiskArgsForCall []struct {
		vmCID   string
		diskCID string
	}
	attachDiskReturns struct {
		result1 error
	}
	DetachDiskStub        func(vmCID, diskCID string) error
	detachDiskMutex       sync.RWMutex
	detachDiskArgsForCall []struct {
		vmCID   string
		diskCID string
	}
	detachDiskReturns struct {
		result1 error
	}
	DeleteDiskStub        func(diskCID string) error
	deleteDiskMutex       sync.RWMutex
	deleteDiskArgsForCall []struct {
		diskCID string
	}
	deleteDiskReturns struct {
		result1 error
	}
	StringStub        func() string
	stringMutex       sync.RWMutex
	stringArgsForCall []struct{}
	stringReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloud) CreateStemcell(imagePath string, cloudProperties property.Map) (stemcellCID string, err error) {
	fake.createStemcellMutex.Lock()
	fake.createStemcellArgsForCall = append(fake.createStemcellArgsForCall, struct {
		imagePath       string
		cloudProperties property.Map
	}{imagePath, cloudProperties})
	fake.recordInvocation("CreateStemcell", []interface{}{imagePath, cloudProperties})
	fake.createStemcellMutex.Unlock()
	if fake.CreateStemcellStub != nil {
		return fake.CreateStemcellStub(imagePath, cloudProperties)
	} else {
		return fake.createStemcellReturns.result1, fake.createStemcellReturns.result2
	}
}

func (fake *FakeCloud) CreateStemcellCallCount() int {
	fake.createStemcellMutex.RLock()
	defer fake.createStemcellMutex.RUnlock()
	return len(fake.createStemcellArgsForCall)
}

func (fake *FakeCloud) CreateStemcellArgsForCall(i int) (string, property.Map) {
	fake.createStemcellMutex.RLock()
	defer fake.createStemcellMutex.RUnlock()
	return fake.createStemcellArgsForCall[i].imagePath, fake.createStemcellArgsForCall[i].cloudProperties
}

func (fake *FakeCloud) CreateStemcellReturns(result1 string, result2 error) {
	fake.CreateStemcellStub = nil
	fake.createStemcellReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloud) DeleteStemcell(stemcellCID string) error {
	fake.deleteStemcellMutex.Lock()
	fake.deleteStemcellArgsForCall = append(fake.deleteStemcellArgsForCall, struct {
		stemcellCID string
	}{stemcellCID})
	fake.recordInvocation("DeleteStemcell", []interface{}{stemcellCID})
	fake.deleteStemcellMutex.Unlock()
	if fake.DeleteStemcellStub != nil {
		return fake.DeleteStemcellStub(stemcellCID)
	} else {
		return fake.deleteStemcellReturns.result1
	}
}

func (fake *FakeCloud) DeleteStemcellCallCount() int {
	fake.deleteStemcellMutex.RLock()
	defer fake.deleteStemcellMutex.RUnlock()
	return len(fake.deleteStemcellArgsForCall)
}

func (fake *FakeCloud) DeleteStemcellArgsForCall(i int) string {
	fake.deleteStemcellMutex.RLock()
	defer fake.deleteStemcellMutex.RUnlock()
	return fake.deleteStemcellArgsForCall[i].stemcellCID
}

func (fake *FakeCloud) DeleteStemcellReturns(result1 error) {
	fake.DeleteStemcellStub = nil
	fake.deleteStemcellReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) HasVM(vmCID string) (bool, error) {
	fake.hasVMMutex.Lock()
	fake.hasVMArgsForCall = append(fake.hasVMArgsForCall, struct {
		vmCID string
	}{vmCID})
	fake.recordInvocation("HasVM", []interface{}{vmCID})
	fake.hasVMMutex.Unlock()
	if fake.HasVMStub != nil {
		return fake.HasVMStub(vmCID)
	} else {
		return fake.hasVMReturns.result1, fake.hasVMReturns.result2
	}
}

func (fake *FakeCloud) HasVMCallCount() int {
	fake.hasVMMutex.RLock()
	defer fake.hasVMMutex.RUnlock()
	return len(fake.hasVMArgsForCall)
}

func (fake *FakeCloud) HasVMArgsForCall(i int) string {
	fake.hasVMMutex.RLock()
	defer fake.hasVMMutex.RUnlock()
	return fake.hasVMArgsForCall[i].vmCID
}

func (fake *FakeCloud) HasVMReturns(result1 bool, result2 error) {
	fake.HasVMStub = nil
	fake.hasVMReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCloud) CreateVM(agentID string, stemcellCID string, cloudProperties property.Map, networksInterfaces map[string]property.Map, env property.Map) (vmCID string, err error) {
	fake.createVMMutex.Lock()
	fake.createVMArgsForCall = append(fake.createVMArgsForCall, struct {
		agentID            string
		stemcellCID        string
		cloudProperties    property.Map
		networksInterfaces map[string]property.Map
		env                property.Map
	}{agentID, stemcellCID, cloudProperties, networksInterfaces, env})
	fake.recordInvocation("CreateVM", []interface{}{agentID, stemcellCID, cloudProperties, networksInterfaces, env})
	fake.createVMMutex.Unlock()
	if fake.CreateVMStub != nil {
		return fake.CreateVMStub(agentID, stemcellCID, cloudProperties, networksInterfaces, env)
	} else {
		return fake.createVMReturns.result1, fake.createVMReturns.result2
	}
}

func (fake *FakeCloud) CreateVMCallCount() int {
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	return len(fake.createVMArgsForCall)
}

func (fake *FakeCloud) CreateVMArgsForCall(i int) (string, string, property.Map, map[string]property.Map, property.Map) {
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	return fake.createVMArgsForCall[i].agentID, fake.createVMArgsForCall[i].stemcellCID, fake.createVMArgsForCall[i].cloudProperties, fake.createVMArgsForCall[i].networksInterfaces, fake.createVMArgsForCall[i].env
}

func (fake *FakeCloud) CreateVMReturns(result1 string, result2 error) {
	fake.CreateVMStub = nil
	fake.createVMReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloud) SetVMMetadata(cmCID string, metadata cloud.VMMetadata) error {
	fake.setVMMetadataMutex.Lock()
	fake.setVMMetadataArgsForCall = append(fake.setVMMetadataArgsForCall, struct {
		cmCID    string
		metadata cloud.VMMetadata
	}{cmCID, metadata})
	fake.recordInvocation("SetVMMetadata", []interface{}{cmCID, metadata})
	fake.setVMMetadataMutex.Unlock()
	if fake.SetVMMetadataStub != nil {
		return fake.SetVMMetadataStub(cmCID, metadata)
	} else {
		return fake.setVMMetadataReturns.result1
	}
}

func (fake *FakeCloud) SetVMMetadataCallCount() int {
	fake.setVMMetadataMutex.RLock()
	defer fake.setVMMetadataMutex.RUnlock()
	return len(fake.setVMMetadataArgsForCall)
}

func (fake *FakeCloud) SetVMMetadataArgsForCall(i int) (string, cloud.VMMetadata) {
	fake.setVMMetadataMutex.RLock()
	defer fake.setVMMetadataMutex.RUnlock()
	return fake.setVMMetadataArgsForCall[i].cmCID, fake.setVMMetadataArgsForCall[i].metadata
}

func (fake *FakeCloud) SetVMMetadataReturns(result1 error) {
	fake.SetVMMetadataStub = nil
	fake.setVMMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) DeleteVM(vmCID string) error {
	fake.deleteVMMutex.Lock()
	fake.deleteVMArgsForCall = append(fake.deleteVMArgsForCall, struct {
		vmCID string
	}{vmCID})
	fake.recordInvocation("DeleteVM", []interface{}{vmCID})
	fake.deleteVMMutex.Unlock()
	if fake.DeleteVMStub != nil {
		return fake.DeleteVMStub(vmCID)
	} else {
		return fake.deleteVMReturns.result1
	}
}

func (fake *FakeCloud) DeleteVMCallCount() int {
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	return len(fake.deleteVMArgsForCall)
}

func (fake *FakeCloud) DeleteVMArgsForCall(i int) string {
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	return fake.deleteVMArgsForCall[i].vmCID
}

func (fake *FakeCloud) DeleteVMReturns(result1 error) {
	fake.DeleteVMStub = nil
	fake.deleteVMReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) CreateDisk(size int, cloudProperties property.Map, vmCID string) (diskCID string, err error) {
	fake.createDiskMutex.Lock()
	fake.createDiskArgsForCall = append(fake.createDiskArgsForCall, struct {
		size            int
		cloudProperties property.Map
		vmCID           string
	}{size, cloudProperties, vmCID})
	fake.recordInvocation("CreateDisk", []interface{}{size, cloudProperties, vmCID})
	fake.createDiskMutex.Unlock()
	if fake.CreateDiskStub != nil {
		return fake.CreateDiskStub(size, cloudProperties, vmCID)
	} else {
		return fake.createDiskReturns.result1, fake.createDiskReturns.result2
	}
}

func (fake *FakeCloud) CreateDiskCallCount() int {
	fake.createDiskMutex.RLock()
	defer fake.createDiskMutex.RUnlock()
	return len(fake.createDiskArgsForCall)
}

func (fake *FakeCloud) CreateDiskArgsForCall(i int) (int, property.Map, string) {
	fake.createDiskMutex.RLock()
	defer fake.createDiskMutex.RUnlock()
	return fake.createDiskArgsForCall[i].size, fake.createDiskArgsForCall[i].cloudProperties, fake.createDiskArgsForCall[i].vmCID
}

func (fake *FakeCloud) CreateDiskReturns(result1 string, result2 error) {
	fake.CreateDiskStub = nil
	fake.createDiskReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloud) AttachDisk(vmCID string, diskCID string) error {
	fake.attachDiskMutex.Lock()
	fake.attachDiskArgsForCall = append(fake.attachDiskArgsForCall, struct {
		vmCID   string
		diskCID string
	}{vmCID, diskCID})
	fake.recordInvocation("AttachDisk", []interface{}{vmCID, diskCID})
	fake.attachDiskMutex.Unlock()
	if fake.AttachDiskStub != nil {
		return fake.AttachDiskStub(vmCID, diskCID)
	} else {
		return fake.attachDiskReturns.result1
	}
}

func (fake *FakeCloud) AttachDiskCallCount() int {
	fake.attachDiskMutex.RLock()
	defer fake.attachDiskMutex.RUnlock()
	return len(fake.attachDiskArgsForCall)
}

func (fake *FakeCloud) AttachDiskArgsForCall(i int) (string, string) {
	fake.attachDiskMutex.RLock()
	defer fake.attachDiskMutex.RUnlock()
	return fake.attachDiskArgsForCall[i].vmCID, fake.attachDiskArgsForCall[i].diskCID
}

func (fake *FakeCloud) AttachDiskReturns(result1 error) {
	fake.AttachDiskStub = nil
	fake.attachDiskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) DetachDisk(vmCID string, diskCID string) error {
	fake.detachDiskMutex.Lock()
	fake.detachDiskArgsForCall = append(fake.detachDiskArgsForCall, struct {
		vmCID   string
		diskCID string
	}{vmCID, diskCID})
	fake.recordInvocation("DetachDisk", []interface{}{vmCID, diskCID})
	fake.detachDiskMutex.Unlock()
	if fake.DetachDiskStub != nil {
		return fake.DetachDiskStub(vmCID, diskCID)
	} else {
		return fake.detachDiskReturns.result1
	}
}

func (fake *FakeCloud) DetachDiskCallCount() int {
	fake.detachDiskMutex.RLock()
	defer fake.detachDiskMutex.RUnlock()
	return len(fake.detachDiskArgsForCall)
}

func (fake *FakeCloud) DetachDiskArgsForCall(i int) (string, string) {
	fake.detachDiskMutex.RLock()
	defer fake.detachDiskMutex.RUnlock()
	return fake.detachDiskArgsForCall[i].vmCID, fake.detachDiskArgsForCall[i].diskCID
}

func (fake *FakeCloud) DetachDiskReturns(result1 error) {
	fake.DetachDiskStub = nil
	fake.detachDiskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) DeleteDisk(diskCID string) error {
	fake.deleteDiskMutex.Lock()
	fake.deleteDiskArgsForCall = append(fake.deleteDiskArgsForCall, struct {
		diskCID string
	}{diskCID})
	fake.recordInvocation("DeleteDisk", []interface{}{diskCID})
	fake.deleteDiskMutex.Unlock()
	if fake.DeleteDiskStub != nil {
		return fake.DeleteDiskStub(diskCID)
	} else {
		return fake.deleteDiskReturns.result1
	}
}

func (fake *FakeCloud) DeleteDiskCallCount() int {
	fake.deleteDiskMutex.RLock()
	defer fake.deleteDiskMutex.RUnlock()
	return len(fake.deleteDiskArgsForCall)
}

func (fake *FakeCloud) DeleteDiskArgsForCall(i int) string {
	fake.deleteDiskMutex.RLock()
	defer fake.deleteDiskMutex.RUnlock()
	return fake.deleteDiskArgsForCall[i].diskCID
}

func (fake *FakeCloud) DeleteDiskReturns(result1 error) {
	fake.DeleteDiskStub = nil
	fake.deleteDiskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) String() string {
	fake.stringMutex.Lock()
	fake.stringArgsForCall = append(fake.stringArgsForCall, struct{}{})
	fake.recordInvocation("String", []interface{}{})
	fake.stringMutex.Unlock()
	if fake.StringStub != nil {
		return fake.StringStub()
	} else {
		return fake.stringReturns.result1
	}
}

func (fake *FakeCloud) StringCallCount() int {
	fake.stringMutex.RLock()
	defer fake.stringMutex.RUnlock()
	return len(fake.stringArgsForCall)
}

func (fake *FakeCloud) StringReturns(result1 string) {
	fake.StringStub = nil
	fake.stringReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCloud) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createStemcellMutex.RLock()
	defer fake.createStemcellMutex.RUnlock()
	fake.deleteStemcellMutex.RLock()
	defer fake.deleteStemcellMutex.RUnlock()
	fake.hasVMMutex.RLock()
	defer fake.hasVMMutex.RUnlock()
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	fake.setVMMetadataMutex.RLock()
	defer fake.setVMMetadataMutex.RUnlock()
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	fake.createDiskMutex.RLock()
	defer fake.createDiskMutex.RUnlock()
	fake.attachDiskMutex.RLock()
	defer fake.attachDiskMutex.RUnlock()
	fake.detachDiskMutex.RLock()
	defer fake.detachDiskMutex.RUnlock()
	fake.deleteDiskMutex.RLock()
	defer fake.deleteDiskMutex.RUnlock()
	fake.stringMutex.RLock()
	defer fake.stringMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCloud) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloud.Cloud = new(FakeCloud)
