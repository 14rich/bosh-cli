// This file was generated by counterfeiter
package cloudfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/cloud"
	boshinst "github.com/cloudfoundry/bosh-cli/installation"
)

type FakeFactory struct {
	NewCloudStub        func(installation boshinst.Installation, directorID string) (cloud.Cloud, error)
	newCloudMutex       sync.RWMutex
	newCloudArgsForCall []struct {
		installation boshinst.Installation
		directorID   string
	}
	newCloudReturns struct {
		result1 cloud.Cloud
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFactory) NewCloud(installation boshinst.Installation, directorID string) (cloud.Cloud, error) {
	fake.newCloudMutex.Lock()
	fake.newCloudArgsForCall = append(fake.newCloudArgsForCall, struct {
		installation boshinst.Installation
		directorID   string
	}{installation, directorID})
	fake.recordInvocation("NewCloud", []interface{}{installation, directorID})
	fake.newCloudMutex.Unlock()
	if fake.NewCloudStub != nil {
		return fake.NewCloudStub(installation, directorID)
	} else {
		return fake.newCloudReturns.result1, fake.newCloudReturns.result2
	}
}

func (fake *FakeFactory) NewCloudCallCount() int {
	fake.newCloudMutex.RLock()
	defer fake.newCloudMutex.RUnlock()
	return len(fake.newCloudArgsForCall)
}

func (fake *FakeFactory) NewCloudArgsForCall(i int) (boshinst.Installation, string) {
	fake.newCloudMutex.RLock()
	defer fake.newCloudMutex.RUnlock()
	return fake.newCloudArgsForCall[i].installation, fake.newCloudArgsForCall[i].directorID
}

func (fake *FakeFactory) NewCloudReturns(result1 cloud.Cloud, result2 error) {
	fake.NewCloudStub = nil
	fake.newCloudReturns = struct {
		result1 cloud.Cloud
		result2 error
	}{result1, result2}
}

func (fake *FakeFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newCloudMutex.RLock()
	defer fake.newCloudMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloud.Factory = new(FakeFactory)
