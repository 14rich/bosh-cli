// This file was generated by counterfeiter
package stemcellfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/stemcell"
	"github.com/cloudfoundry/bosh-cli/ui"
)

type FakeManager struct {
	FindCurrentStub        func() ([]stemcell.CloudStemcell, error)
	findCurrentMutex       sync.RWMutex
	findCurrentArgsForCall []struct{}
	findCurrentReturns     struct {
		result1 []stemcell.CloudStemcell
		result2 error
	}
	UploadStub        func(stemcell.ExtractedStemcell, ui.Stage) (stemcell.CloudStemcell, error)
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		arg1 stemcell.ExtractedStemcell
		arg2 ui.Stage
	}
	uploadReturns struct {
		result1 stemcell.CloudStemcell
		result2 error
	}
	FindUnusedStub        func() ([]stemcell.CloudStemcell, error)
	findUnusedMutex       sync.RWMutex
	findUnusedArgsForCall []struct{}
	findUnusedReturns     struct {
		result1 []stemcell.CloudStemcell
		result2 error
	}
	DeleteUnusedStub        func(ui.Stage) error
	deleteUnusedMutex       sync.RWMutex
	deleteUnusedArgsForCall []struct {
		arg1 ui.Stage
	}
	deleteUnusedReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) FindCurrent() ([]stemcell.CloudStemcell, error) {
	fake.findCurrentMutex.Lock()
	fake.findCurrentArgsForCall = append(fake.findCurrentArgsForCall, struct{}{})
	fake.recordInvocation("FindCurrent", []interface{}{})
	fake.findCurrentMutex.Unlock()
	if fake.FindCurrentStub != nil {
		return fake.FindCurrentStub()
	} else {
		return fake.findCurrentReturns.result1, fake.findCurrentReturns.result2
	}
}

func (fake *FakeManager) FindCurrentCallCount() int {
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	return len(fake.findCurrentArgsForCall)
}

func (fake *FakeManager) FindCurrentReturns(result1 []stemcell.CloudStemcell, result2 error) {
	fake.FindCurrentStub = nil
	fake.findCurrentReturns = struct {
		result1 []stemcell.CloudStemcell
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Upload(arg1 stemcell.ExtractedStemcell, arg2 ui.Stage) (stemcell.CloudStemcell, error) {
	fake.uploadMutex.Lock()
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		arg1 stemcell.ExtractedStemcell
		arg2 ui.Stage
	}{arg1, arg2})
	fake.recordInvocation("Upload", []interface{}{arg1, arg2})
	fake.uploadMutex.Unlock()
	if fake.UploadStub != nil {
		return fake.UploadStub(arg1, arg2)
	} else {
		return fake.uploadReturns.result1, fake.uploadReturns.result2
	}
}

func (fake *FakeManager) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeManager) UploadArgsForCall(i int) (stemcell.ExtractedStemcell, ui.Stage) {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.uploadArgsForCall[i].arg1, fake.uploadArgsForCall[i].arg2
}

func (fake *FakeManager) UploadReturns(result1 stemcell.CloudStemcell, result2 error) {
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 stemcell.CloudStemcell
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) FindUnused() ([]stemcell.CloudStemcell, error) {
	fake.findUnusedMutex.Lock()
	fake.findUnusedArgsForCall = append(fake.findUnusedArgsForCall, struct{}{})
	fake.recordInvocation("FindUnused", []interface{}{})
	fake.findUnusedMutex.Unlock()
	if fake.FindUnusedStub != nil {
		return fake.FindUnusedStub()
	} else {
		return fake.findUnusedReturns.result1, fake.findUnusedReturns.result2
	}
}

func (fake *FakeManager) FindUnusedCallCount() int {
	fake.findUnusedMutex.RLock()
	defer fake.findUnusedMutex.RUnlock()
	return len(fake.findUnusedArgsForCall)
}

func (fake *FakeManager) FindUnusedReturns(result1 []stemcell.CloudStemcell, result2 error) {
	fake.FindUnusedStub = nil
	fake.findUnusedReturns = struct {
		result1 []stemcell.CloudStemcell
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) DeleteUnused(arg1 ui.Stage) error {
	fake.deleteUnusedMutex.Lock()
	fake.deleteUnusedArgsForCall = append(fake.deleteUnusedArgsForCall, struct {
		arg1 ui.Stage
	}{arg1})
	fake.recordInvocation("DeleteUnused", []interface{}{arg1})
	fake.deleteUnusedMutex.Unlock()
	if fake.DeleteUnusedStub != nil {
		return fake.DeleteUnusedStub(arg1)
	} else {
		return fake.deleteUnusedReturns.result1
	}
}

func (fake *FakeManager) DeleteUnusedCallCount() int {
	fake.deleteUnusedMutex.RLock()
	defer fake.deleteUnusedMutex.RUnlock()
	return len(fake.deleteUnusedArgsForCall)
}

func (fake *FakeManager) DeleteUnusedArgsForCall(i int) ui.Stage {
	fake.deleteUnusedMutex.RLock()
	defer fake.deleteUnusedMutex.RUnlock()
	return fake.deleteUnusedArgsForCall[i].arg1
}

func (fake *FakeManager) DeleteUnusedReturns(result1 error) {
	fake.DeleteUnusedStub = nil
	fake.deleteUnusedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	fake.findUnusedMutex.RLock()
	defer fake.findUnusedMutex.RUnlock()
	fake.deleteUnusedMutex.RLock()
	defer fake.deleteUnusedMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stemcell.Manager = new(FakeManager)
