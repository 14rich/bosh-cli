// This file was generated by counterfeiter
package stemcellfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/stemcell"
)

type FakeExtractor struct {
	ExtractStub        func(tarballPath string) (stemcell.ExtractedStemcell, error)
	extractMutex       sync.RWMutex
	extractArgsForCall []struct {
		tarballPath string
	}
	extractReturns struct {
		result1 stemcell.ExtractedStemcell
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExtractor) Extract(tarballPath string) (stemcell.ExtractedStemcell, error) {
	fake.extractMutex.Lock()
	fake.extractArgsForCall = append(fake.extractArgsForCall, struct {
		tarballPath string
	}{tarballPath})
	fake.recordInvocation("Extract", []interface{}{tarballPath})
	fake.extractMutex.Unlock()
	if fake.ExtractStub != nil {
		return fake.ExtractStub(tarballPath)
	} else {
		return fake.extractReturns.result1, fake.extractReturns.result2
	}
}

func (fake *FakeExtractor) ExtractCallCount() int {
	fake.extractMutex.RLock()
	defer fake.extractMutex.RUnlock()
	return len(fake.extractArgsForCall)
}

func (fake *FakeExtractor) ExtractArgsForCall(i int) string {
	fake.extractMutex.RLock()
	defer fake.extractMutex.RUnlock()
	return fake.extractArgsForCall[i].tarballPath
}

func (fake *FakeExtractor) ExtractReturns(result1 stemcell.ExtractedStemcell, result2 error) {
	fake.ExtractStub = nil
	fake.extractReturns = struct {
		result1 stemcell.ExtractedStemcell
		result2 error
	}{result1, result2}
}

func (fake *FakeExtractor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.extractMutex.RLock()
	defer fake.extractMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeExtractor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stemcell.Extractor = new(FakeExtractor)
