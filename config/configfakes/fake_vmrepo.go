// This file was generated by counterfeiter
package configfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/config"
)

type FakeVMRepo struct {
	FindCurrentStub        func() (cid string, found bool, err error)
	findCurrentMutex       sync.RWMutex
	findCurrentArgsForCall []struct{}
	findCurrentReturns     struct {
		result1 string
		result2 bool
		result3 error
	}
	UpdateCurrentStub        func(cid string) error
	updateCurrentMutex       sync.RWMutex
	updateCurrentArgsForCall []struct {
		cid string
	}
	updateCurrentReturns struct {
		result1 error
	}
	ClearCurrentStub        func() error
	clearCurrentMutex       sync.RWMutex
	clearCurrentArgsForCall []struct{}
	clearCurrentReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVMRepo) FindCurrent() (cid string, found bool, err error) {
	fake.findCurrentMutex.Lock()
	fake.findCurrentArgsForCall = append(fake.findCurrentArgsForCall, struct{}{})
	fake.recordInvocation("FindCurrent", []interface{}{})
	fake.findCurrentMutex.Unlock()
	if fake.FindCurrentStub != nil {
		return fake.FindCurrentStub()
	} else {
		return fake.findCurrentReturns.result1, fake.findCurrentReturns.result2, fake.findCurrentReturns.result3
	}
}

func (fake *FakeVMRepo) FindCurrentCallCount() int {
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	return len(fake.findCurrentArgsForCall)
}

func (fake *FakeVMRepo) FindCurrentReturns(result1 string, result2 bool, result3 error) {
	fake.FindCurrentStub = nil
	fake.findCurrentReturns = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVMRepo) UpdateCurrent(cid string) error {
	fake.updateCurrentMutex.Lock()
	fake.updateCurrentArgsForCall = append(fake.updateCurrentArgsForCall, struct {
		cid string
	}{cid})
	fake.recordInvocation("UpdateCurrent", []interface{}{cid})
	fake.updateCurrentMutex.Unlock()
	if fake.UpdateCurrentStub != nil {
		return fake.UpdateCurrentStub(cid)
	} else {
		return fake.updateCurrentReturns.result1
	}
}

func (fake *FakeVMRepo) UpdateCurrentCallCount() int {
	fake.updateCurrentMutex.RLock()
	defer fake.updateCurrentMutex.RUnlock()
	return len(fake.updateCurrentArgsForCall)
}

func (fake *FakeVMRepo) UpdateCurrentArgsForCall(i int) string {
	fake.updateCurrentMutex.RLock()
	defer fake.updateCurrentMutex.RUnlock()
	return fake.updateCurrentArgsForCall[i].cid
}

func (fake *FakeVMRepo) UpdateCurrentReturns(result1 error) {
	fake.UpdateCurrentStub = nil
	fake.updateCurrentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVMRepo) ClearCurrent() error {
	fake.clearCurrentMutex.Lock()
	fake.clearCurrentArgsForCall = append(fake.clearCurrentArgsForCall, struct{}{})
	fake.recordInvocation("ClearCurrent", []interface{}{})
	fake.clearCurrentMutex.Unlock()
	if fake.ClearCurrentStub != nil {
		return fake.ClearCurrentStub()
	} else {
		return fake.clearCurrentReturns.result1
	}
}

func (fake *FakeVMRepo) ClearCurrentCallCount() int {
	fake.clearCurrentMutex.RLock()
	defer fake.clearCurrentMutex.RUnlock()
	return len(fake.clearCurrentArgsForCall)
}

func (fake *FakeVMRepo) ClearCurrentReturns(result1 error) {
	fake.ClearCurrentStub = nil
	fake.clearCurrentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVMRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	fake.updateCurrentMutex.RLock()
	defer fake.updateCurrentMutex.RUnlock()
	fake.clearCurrentMutex.RLock()
	defer fake.clearCurrentMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeVMRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.VMRepo = new(FakeVMRepo)
