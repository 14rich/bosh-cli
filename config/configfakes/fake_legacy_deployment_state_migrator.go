// This file was generated by counterfeiter
package configfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/config"
)

type FakeLegacyDeploymentStateMigrator struct {
	MigrateIfExistsStub        func(configPath string) (migrated bool, err error)
	migrateIfExistsMutex       sync.RWMutex
	migrateIfExistsArgsForCall []struct {
		configPath string
	}
	migrateIfExistsReturns struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLegacyDeploymentStateMigrator) MigrateIfExists(configPath string) (migrated bool, err error) {
	fake.migrateIfExistsMutex.Lock()
	fake.migrateIfExistsArgsForCall = append(fake.migrateIfExistsArgsForCall, struct {
		configPath string
	}{configPath})
	fake.recordInvocation("MigrateIfExists", []interface{}{configPath})
	fake.migrateIfExistsMutex.Unlock()
	if fake.MigrateIfExistsStub != nil {
		return fake.MigrateIfExistsStub(configPath)
	} else {
		return fake.migrateIfExistsReturns.result1, fake.migrateIfExistsReturns.result2
	}
}

func (fake *FakeLegacyDeploymentStateMigrator) MigrateIfExistsCallCount() int {
	fake.migrateIfExistsMutex.RLock()
	defer fake.migrateIfExistsMutex.RUnlock()
	return len(fake.migrateIfExistsArgsForCall)
}

func (fake *FakeLegacyDeploymentStateMigrator) MigrateIfExistsArgsForCall(i int) string {
	fake.migrateIfExistsMutex.RLock()
	defer fake.migrateIfExistsMutex.RUnlock()
	return fake.migrateIfExistsArgsForCall[i].configPath
}

func (fake *FakeLegacyDeploymentStateMigrator) MigrateIfExistsReturns(result1 bool, result2 error) {
	fake.MigrateIfExistsStub = nil
	fake.migrateIfExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLegacyDeploymentStateMigrator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.migrateIfExistsMutex.RLock()
	defer fake.migrateIfExistsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLegacyDeploymentStateMigrator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.LegacyDeploymentStateMigrator = new(FakeLegacyDeploymentStateMigrator)
