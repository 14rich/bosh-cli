// This file was generated by counterfeiter
package configfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/config"
)

type FakeDeploymentRepo struct {
	UpdateCurrentStub        func(manifestSHA string) error
	updateCurrentMutex       sync.RWMutex
	updateCurrentArgsForCall []struct {
		manifestSHA string
	}
	updateCurrentReturns struct {
		result1 error
	}
	FindCurrentStub        func() (manifestSHA string, found bool, err error)
	findCurrentMutex       sync.RWMutex
	findCurrentArgsForCall []struct{}
	findCurrentReturns     struct {
		result1 string
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeploymentRepo) UpdateCurrent(manifestSHA string) error {
	fake.updateCurrentMutex.Lock()
	fake.updateCurrentArgsForCall = append(fake.updateCurrentArgsForCall, struct {
		manifestSHA string
	}{manifestSHA})
	fake.recordInvocation("UpdateCurrent", []interface{}{manifestSHA})
	fake.updateCurrentMutex.Unlock()
	if fake.UpdateCurrentStub != nil {
		return fake.UpdateCurrentStub(manifestSHA)
	} else {
		return fake.updateCurrentReturns.result1
	}
}

func (fake *FakeDeploymentRepo) UpdateCurrentCallCount() int {
	fake.updateCurrentMutex.RLock()
	defer fake.updateCurrentMutex.RUnlock()
	return len(fake.updateCurrentArgsForCall)
}

func (fake *FakeDeploymentRepo) UpdateCurrentArgsForCall(i int) string {
	fake.updateCurrentMutex.RLock()
	defer fake.updateCurrentMutex.RUnlock()
	return fake.updateCurrentArgsForCall[i].manifestSHA
}

func (fake *FakeDeploymentRepo) UpdateCurrentReturns(result1 error) {
	fake.UpdateCurrentStub = nil
	fake.updateCurrentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeploymentRepo) FindCurrent() (manifestSHA string, found bool, err error) {
	fake.findCurrentMutex.Lock()
	fake.findCurrentArgsForCall = append(fake.findCurrentArgsForCall, struct{}{})
	fake.recordInvocation("FindCurrent", []interface{}{})
	fake.findCurrentMutex.Unlock()
	if fake.FindCurrentStub != nil {
		return fake.FindCurrentStub()
	} else {
		return fake.findCurrentReturns.result1, fake.findCurrentReturns.result2, fake.findCurrentReturns.result3
	}
}

func (fake *FakeDeploymentRepo) FindCurrentCallCount() int {
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	return len(fake.findCurrentArgsForCall)
}

func (fake *FakeDeploymentRepo) FindCurrentReturns(result1 string, result2 bool, result3 error) {
	fake.FindCurrentStub = nil
	fake.findCurrentReturns = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDeploymentRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateCurrentMutex.RLock()
	defer fake.updateCurrentMutex.RUnlock()
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDeploymentRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.DeploymentRepo = new(FakeDeploymentRepo)
