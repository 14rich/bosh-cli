// This file was generated by counterfeiter
package configfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/config"
	"github.com/cloudfoundry/bosh-cli/release"
)

type FakeReleaseRepo struct {
	ListStub        func() ([]config.ReleaseRecord, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct{}
	listReturns     struct {
		result1 []config.ReleaseRecord
		result2 error
	}
	UpdateStub        func([]release.Release) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 []release.Release
	}
	updateReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReleaseRepo) List() ([]config.ReleaseRecord, error) {
	fake.listMutex.Lock()
	fake.listArgsForCall = append(fake.listArgsForCall, struct{}{})
	fake.recordInvocation("List", []interface{}{})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub()
	} else {
		return fake.listReturns.result1, fake.listReturns.result2
	}
}

func (fake *FakeReleaseRepo) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeReleaseRepo) ListReturns(result1 []config.ReleaseRecord, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []config.ReleaseRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseRepo) Update(arg1 []release.Release) error {
	var arg1Copy []release.Release
	if arg1 != nil {
		arg1Copy = make([]release.Release, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 []release.Release
	}{arg1Copy})
	fake.recordInvocation("Update", []interface{}{arg1Copy})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1)
	} else {
		return fake.updateReturns.result1
	}
}

func (fake *FakeReleaseRepo) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeReleaseRepo) UpdateArgsForCall(i int) []release.Release {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].arg1
}

func (fake *FakeReleaseRepo) UpdateReturns(result1 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReleaseRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeReleaseRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.ReleaseRepo = new(FakeReleaseRepo)
