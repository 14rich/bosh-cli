// This file was generated by counterfeiter
package configfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/config"
	"github.com/cloudfoundry/bosh-utils/property"
)

type FakeDiskRepo struct {
	UpdateCurrentStub        func(diskID string) error
	updateCurrentMutex       sync.RWMutex
	updateCurrentArgsForCall []struct {
		diskID string
	}
	updateCurrentReturns struct {
		result1 error
	}
	FindCurrentStub        func() (config.DiskRecord, bool, error)
	findCurrentMutex       sync.RWMutex
	findCurrentArgsForCall []struct{}
	findCurrentReturns     struct {
		result1 config.DiskRecord
		result2 bool
		result3 error
	}
	ClearCurrentStub        func() error
	clearCurrentMutex       sync.RWMutex
	clearCurrentArgsForCall []struct{}
	clearCurrentReturns     struct {
		result1 error
	}
	SaveStub        func(cid string, size int, cloudProperties property.Map) (config.DiskRecord, error)
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		cid             string
		size            int
		cloudProperties property.Map
	}
	saveReturns struct {
		result1 config.DiskRecord
		result2 error
	}
	FindStub        func(cid string) (config.DiskRecord, bool, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		cid string
	}
	findReturns struct {
		result1 config.DiskRecord
		result2 bool
		result3 error
	}
	AllStub        func() ([]config.DiskRecord, error)
	allMutex       sync.RWMutex
	allArgsForCall []struct{}
	allReturns     struct {
		result1 []config.DiskRecord
		result2 error
	}
	DeleteStub        func(config.DiskRecord) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 config.DiskRecord
	}
	deleteReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDiskRepo) UpdateCurrent(diskID string) error {
	fake.updateCurrentMutex.Lock()
	fake.updateCurrentArgsForCall = append(fake.updateCurrentArgsForCall, struct {
		diskID string
	}{diskID})
	fake.recordInvocation("UpdateCurrent", []interface{}{diskID})
	fake.updateCurrentMutex.Unlock()
	if fake.UpdateCurrentStub != nil {
		return fake.UpdateCurrentStub(diskID)
	} else {
		return fake.updateCurrentReturns.result1
	}
}

func (fake *FakeDiskRepo) UpdateCurrentCallCount() int {
	fake.updateCurrentMutex.RLock()
	defer fake.updateCurrentMutex.RUnlock()
	return len(fake.updateCurrentArgsForCall)
}

func (fake *FakeDiskRepo) UpdateCurrentArgsForCall(i int) string {
	fake.updateCurrentMutex.RLock()
	defer fake.updateCurrentMutex.RUnlock()
	return fake.updateCurrentArgsForCall[i].diskID
}

func (fake *FakeDiskRepo) UpdateCurrentReturns(result1 error) {
	fake.UpdateCurrentStub = nil
	fake.updateCurrentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDiskRepo) FindCurrent() (config.DiskRecord, bool, error) {
	fake.findCurrentMutex.Lock()
	fake.findCurrentArgsForCall = append(fake.findCurrentArgsForCall, struct{}{})
	fake.recordInvocation("FindCurrent", []interface{}{})
	fake.findCurrentMutex.Unlock()
	if fake.FindCurrentStub != nil {
		return fake.FindCurrentStub()
	} else {
		return fake.findCurrentReturns.result1, fake.findCurrentReturns.result2, fake.findCurrentReturns.result3
	}
}

func (fake *FakeDiskRepo) FindCurrentCallCount() int {
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	return len(fake.findCurrentArgsForCall)
}

func (fake *FakeDiskRepo) FindCurrentReturns(result1 config.DiskRecord, result2 bool, result3 error) {
	fake.FindCurrentStub = nil
	fake.findCurrentReturns = struct {
		result1 config.DiskRecord
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDiskRepo) ClearCurrent() error {
	fake.clearCurrentMutex.Lock()
	fake.clearCurrentArgsForCall = append(fake.clearCurrentArgsForCall, struct{}{})
	fake.recordInvocation("ClearCurrent", []interface{}{})
	fake.clearCurrentMutex.Unlock()
	if fake.ClearCurrentStub != nil {
		return fake.ClearCurrentStub()
	} else {
		return fake.clearCurrentReturns.result1
	}
}

func (fake *FakeDiskRepo) ClearCurrentCallCount() int {
	fake.clearCurrentMutex.RLock()
	defer fake.clearCurrentMutex.RUnlock()
	return len(fake.clearCurrentArgsForCall)
}

func (fake *FakeDiskRepo) ClearCurrentReturns(result1 error) {
	fake.ClearCurrentStub = nil
	fake.clearCurrentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDiskRepo) Save(cid string, size int, cloudProperties property.Map) (config.DiskRecord, error) {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		cid             string
		size            int
		cloudProperties property.Map
	}{cid, size, cloudProperties})
	fake.recordInvocation("Save", []interface{}{cid, size, cloudProperties})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub(cid, size, cloudProperties)
	} else {
		return fake.saveReturns.result1, fake.saveReturns.result2
	}
}

func (fake *FakeDiskRepo) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeDiskRepo) SaveArgsForCall(i int) (string, int, property.Map) {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return fake.saveArgsForCall[i].cid, fake.saveArgsForCall[i].size, fake.saveArgsForCall[i].cloudProperties
}

func (fake *FakeDiskRepo) SaveReturns(result1 config.DiskRecord, result2 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 config.DiskRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDiskRepo) Find(cid string) (config.DiskRecord, bool, error) {
	fake.findMutex.Lock()
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		cid string
	}{cid})
	fake.recordInvocation("Find", []interface{}{cid})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(cid)
	} else {
		return fake.findReturns.result1, fake.findReturns.result2, fake.findReturns.result3
	}
}

func (fake *FakeDiskRepo) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeDiskRepo) FindArgsForCall(i int) string {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].cid
}

func (fake *FakeDiskRepo) FindReturns(result1 config.DiskRecord, result2 bool, result3 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 config.DiskRecord
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDiskRepo) All() ([]config.DiskRecord, error) {
	fake.allMutex.Lock()
	fake.allArgsForCall = append(fake.allArgsForCall, struct{}{})
	fake.recordInvocation("All", []interface{}{})
	fake.allMutex.Unlock()
	if fake.AllStub != nil {
		return fake.AllStub()
	} else {
		return fake.allReturns.result1, fake.allReturns.result2
	}
}

func (fake *FakeDiskRepo) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *FakeDiskRepo) AllReturns(result1 []config.DiskRecord, result2 error) {
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 []config.DiskRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDiskRepo) Delete(arg1 config.DiskRecord) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 config.DiskRecord
	}{arg1})
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeDiskRepo) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeDiskRepo) DeleteArgsForCall(i int) config.DiskRecord {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].arg1
}

func (fake *FakeDiskRepo) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDiskRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateCurrentMutex.RLock()
	defer fake.updateCurrentMutex.RUnlock()
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	fake.clearCurrentMutex.RLock()
	defer fake.clearCurrentMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDiskRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.DiskRepo = new(FakeDiskRepo)
