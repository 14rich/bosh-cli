// This file was generated by counterfeiter
package blobstorefakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/blobstore"
)

type FakeBlobstore struct {
	GetStub        func(blobID string) (blobstore.LocalBlob, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		blobID string
	}
	getReturns struct {
		result1 blobstore.LocalBlob
		result2 error
	}
	AddStub        func(sourcePath string) (blobID string, err error)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		sourcePath string
	}
	addReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlobstore) Get(blobID string) (blobstore.LocalBlob, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		blobID string
	}{blobID})
	fake.recordInvocation("Get", []interface{}{blobID})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(blobID)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *FakeBlobstore) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeBlobstore) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].blobID
}

func (fake *FakeBlobstore) GetReturns(result1 blobstore.LocalBlob, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 blobstore.LocalBlob
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobstore) Add(sourcePath string) (blobID string, err error) {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		sourcePath string
	}{sourcePath})
	fake.recordInvocation("Add", []interface{}{sourcePath})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(sourcePath)
	} else {
		return fake.addReturns.result1, fake.addReturns.result2
	}
}

func (fake *FakeBlobstore) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeBlobstore) AddArgsForCall(i int) string {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].sourcePath
}

func (fake *FakeBlobstore) AddReturns(result1 string, result2 error) {
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobstore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBlobstore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ blobstore.Blobstore = new(FakeBlobstore)
