// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-init/cmd/config"
)

type FakeConfig struct {
	TargetStub        func() string
	targetMutex       sync.RWMutex
	targetArgsForCall []struct{}
	targetReturns     struct {
		result1 string
	}
	TargetsStub        func() []config.Target
	targetsMutex       sync.RWMutex
	targetsArgsForCall []struct{}
	targetsReturns     struct {
		result1 []config.Target
	}
	ResolveTargetStub        func(urlOrAlias string) string
	resolveTargetMutex       sync.RWMutex
	resolveTargetArgsForCall []struct {
		urlOrAlias string
	}
	resolveTargetReturns struct {
		result1 string
	}
	SetTargetStub        func(urlOrAlias, alias, caCert string) config.Config
	setTargetMutex       sync.RWMutex
	setTargetArgsForCall []struct {
		urlOrAlias string
		alias      string
		caCert     string
	}
	setTargetReturns struct {
		result1 config.Config
	}
	CACertStub        func(url string) string
	cACertMutex       sync.RWMutex
	cACertArgsForCall []struct {
		url string
	}
	cACertReturns struct {
		result1 string
	}
	CredentialsStub        func(url string) config.Creds
	credentialsMutex       sync.RWMutex
	credentialsArgsForCall []struct {
		url string
	}
	credentialsReturns struct {
		result1 config.Creds
	}
	SetCredentialsStub        func(url string, creds config.Creds) config.Config
	setCredentialsMutex       sync.RWMutex
	setCredentialsArgsForCall []struct {
		url   string
		creds config.Creds
	}
	setCredentialsReturns struct {
		result1 config.Config
	}
	UnsetCredentialsStub        func(url string) config.Config
	unsetCredentialsMutex       sync.RWMutex
	unsetCredentialsArgsForCall []struct {
		url string
	}
	unsetCredentialsReturns struct {
		result1 config.Config
	}
	DeploymentStub        func(url string) string
	deploymentMutex       sync.RWMutex
	deploymentArgsForCall []struct {
		url string
	}
	deploymentReturns struct {
		result1 string
	}
	SetDeploymentStub        func(url, nameOrPath string) config.Config
	setDeploymentMutex       sync.RWMutex
	setDeploymentArgsForCall []struct {
		url        string
		nameOrPath string
	}
	setDeploymentReturns struct {
		result1 config.Config
	}
	SaveStub        func() error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct{}
	saveReturns     struct {
		result1 error
	}
}

func (fake *FakeConfig) Target() string {
	fake.targetMutex.Lock()
	fake.targetArgsForCall = append(fake.targetArgsForCall, struct{}{})
	fake.targetMutex.Unlock()
	if fake.TargetStub != nil {
		return fake.TargetStub()
	} else {
		return fake.targetReturns.result1
	}
}

func (fake *FakeConfig) TargetCallCount() int {
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	return len(fake.targetArgsForCall)
}

func (fake *FakeConfig) TargetReturns(result1 string) {
	fake.TargetStub = nil
	fake.targetReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) Targets() []config.Target {
	fake.targetsMutex.Lock()
	fake.targetsArgsForCall = append(fake.targetsArgsForCall, struct{}{})
	fake.targetsMutex.Unlock()
	if fake.TargetsStub != nil {
		return fake.TargetsStub()
	} else {
		return fake.targetsReturns.result1
	}
}

func (fake *FakeConfig) TargetsCallCount() int {
	fake.targetsMutex.RLock()
	defer fake.targetsMutex.RUnlock()
	return len(fake.targetsArgsForCall)
}

func (fake *FakeConfig) TargetsReturns(result1 []config.Target) {
	fake.TargetsStub = nil
	fake.targetsReturns = struct {
		result1 []config.Target
	}{result1}
}

func (fake *FakeConfig) ResolveTarget(urlOrAlias string) string {
	fake.resolveTargetMutex.Lock()
	fake.resolveTargetArgsForCall = append(fake.resolveTargetArgsForCall, struct {
		urlOrAlias string
	}{urlOrAlias})
	fake.resolveTargetMutex.Unlock()
	if fake.ResolveTargetStub != nil {
		return fake.ResolveTargetStub(urlOrAlias)
	} else {
		return fake.resolveTargetReturns.result1
	}
}

func (fake *FakeConfig) ResolveTargetCallCount() int {
	fake.resolveTargetMutex.RLock()
	defer fake.resolveTargetMutex.RUnlock()
	return len(fake.resolveTargetArgsForCall)
}

func (fake *FakeConfig) ResolveTargetArgsForCall(i int) string {
	fake.resolveTargetMutex.RLock()
	defer fake.resolveTargetMutex.RUnlock()
	return fake.resolveTargetArgsForCall[i].urlOrAlias
}

func (fake *FakeConfig) ResolveTargetReturns(result1 string) {
	fake.ResolveTargetStub = nil
	fake.resolveTargetReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) SetTarget(urlOrAlias string, alias string, caCert string) config.Config {
	fake.setTargetMutex.Lock()
	fake.setTargetArgsForCall = append(fake.setTargetArgsForCall, struct {
		urlOrAlias string
		alias      string
		caCert     string
	}{urlOrAlias, alias, caCert})
	fake.setTargetMutex.Unlock()
	if fake.SetTargetStub != nil {
		return fake.SetTargetStub(urlOrAlias, alias, caCert)
	} else {
		return fake.setTargetReturns.result1
	}
}

func (fake *FakeConfig) SetTargetCallCount() int {
	fake.setTargetMutex.RLock()
	defer fake.setTargetMutex.RUnlock()
	return len(fake.setTargetArgsForCall)
}

func (fake *FakeConfig) SetTargetArgsForCall(i int) (string, string, string) {
	fake.setTargetMutex.RLock()
	defer fake.setTargetMutex.RUnlock()
	return fake.setTargetArgsForCall[i].urlOrAlias, fake.setTargetArgsForCall[i].alias, fake.setTargetArgsForCall[i].caCert
}

func (fake *FakeConfig) SetTargetReturns(result1 config.Config) {
	fake.SetTargetStub = nil
	fake.setTargetReturns = struct {
		result1 config.Config
	}{result1}
}

func (fake *FakeConfig) CACert(url string) string {
	fake.cACertMutex.Lock()
	fake.cACertArgsForCall = append(fake.cACertArgsForCall, struct {
		url string
	}{url})
	fake.cACertMutex.Unlock()
	if fake.CACertStub != nil {
		return fake.CACertStub(url)
	} else {
		return fake.cACertReturns.result1
	}
}

func (fake *FakeConfig) CACertCallCount() int {
	fake.cACertMutex.RLock()
	defer fake.cACertMutex.RUnlock()
	return len(fake.cACertArgsForCall)
}

func (fake *FakeConfig) CACertArgsForCall(i int) string {
	fake.cACertMutex.RLock()
	defer fake.cACertMutex.RUnlock()
	return fake.cACertArgsForCall[i].url
}

func (fake *FakeConfig) CACertReturns(result1 string) {
	fake.CACertStub = nil
	fake.cACertReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) Credentials(url string) config.Creds {
	fake.credentialsMutex.Lock()
	fake.credentialsArgsForCall = append(fake.credentialsArgsForCall, struct {
		url string
	}{url})
	fake.credentialsMutex.Unlock()
	if fake.CredentialsStub != nil {
		return fake.CredentialsStub(url)
	} else {
		return fake.credentialsReturns.result1
	}
}

func (fake *FakeConfig) CredentialsCallCount() int {
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	return len(fake.credentialsArgsForCall)
}

func (fake *FakeConfig) CredentialsArgsForCall(i int) string {
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	return fake.credentialsArgsForCall[i].url
}

func (fake *FakeConfig) CredentialsReturns(result1 config.Creds) {
	fake.CredentialsStub = nil
	fake.credentialsReturns = struct {
		result1 config.Creds
	}{result1}
}

func (fake *FakeConfig) SetCredentials(url string, creds config.Creds) config.Config {
	fake.setCredentialsMutex.Lock()
	fake.setCredentialsArgsForCall = append(fake.setCredentialsArgsForCall, struct {
		url   string
		creds config.Creds
	}{url, creds})
	fake.setCredentialsMutex.Unlock()
	if fake.SetCredentialsStub != nil {
		return fake.SetCredentialsStub(url, creds)
	} else {
		return fake.setCredentialsReturns.result1
	}
}

func (fake *FakeConfig) SetCredentialsCallCount() int {
	fake.setCredentialsMutex.RLock()
	defer fake.setCredentialsMutex.RUnlock()
	return len(fake.setCredentialsArgsForCall)
}

func (fake *FakeConfig) SetCredentialsArgsForCall(i int) (string, config.Creds) {
	fake.setCredentialsMutex.RLock()
	defer fake.setCredentialsMutex.RUnlock()
	return fake.setCredentialsArgsForCall[i].url, fake.setCredentialsArgsForCall[i].creds
}

func (fake *FakeConfig) SetCredentialsReturns(result1 config.Config) {
	fake.SetCredentialsStub = nil
	fake.setCredentialsReturns = struct {
		result1 config.Config
	}{result1}
}

func (fake *FakeConfig) UnsetCredentials(url string) config.Config {
	fake.unsetCredentialsMutex.Lock()
	fake.unsetCredentialsArgsForCall = append(fake.unsetCredentialsArgsForCall, struct {
		url string
	}{url})
	fake.unsetCredentialsMutex.Unlock()
	if fake.UnsetCredentialsStub != nil {
		return fake.UnsetCredentialsStub(url)
	} else {
		return fake.unsetCredentialsReturns.result1
	}
}

func (fake *FakeConfig) UnsetCredentialsCallCount() int {
	fake.unsetCredentialsMutex.RLock()
	defer fake.unsetCredentialsMutex.RUnlock()
	return len(fake.unsetCredentialsArgsForCall)
}

func (fake *FakeConfig) UnsetCredentialsArgsForCall(i int) string {
	fake.unsetCredentialsMutex.RLock()
	defer fake.unsetCredentialsMutex.RUnlock()
	return fake.unsetCredentialsArgsForCall[i].url
}

func (fake *FakeConfig) UnsetCredentialsReturns(result1 config.Config) {
	fake.UnsetCredentialsStub = nil
	fake.unsetCredentialsReturns = struct {
		result1 config.Config
	}{result1}
}

func (fake *FakeConfig) Deployment(url string) string {
	fake.deploymentMutex.Lock()
	fake.deploymentArgsForCall = append(fake.deploymentArgsForCall, struct {
		url string
	}{url})
	fake.deploymentMutex.Unlock()
	if fake.DeploymentStub != nil {
		return fake.DeploymentStub(url)
	} else {
		return fake.deploymentReturns.result1
	}
}

func (fake *FakeConfig) DeploymentCallCount() int {
	fake.deploymentMutex.RLock()
	defer fake.deploymentMutex.RUnlock()
	return len(fake.deploymentArgsForCall)
}

func (fake *FakeConfig) DeploymentArgsForCall(i int) string {
	fake.deploymentMutex.RLock()
	defer fake.deploymentMutex.RUnlock()
	return fake.deploymentArgsForCall[i].url
}

func (fake *FakeConfig) DeploymentReturns(result1 string) {
	fake.DeploymentStub = nil
	fake.deploymentReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) SetDeployment(url string, nameOrPath string) config.Config {
	fake.setDeploymentMutex.Lock()
	fake.setDeploymentArgsForCall = append(fake.setDeploymentArgsForCall, struct {
		url        string
		nameOrPath string
	}{url, nameOrPath})
	fake.setDeploymentMutex.Unlock()
	if fake.SetDeploymentStub != nil {
		return fake.SetDeploymentStub(url, nameOrPath)
	} else {
		return fake.setDeploymentReturns.result1
	}
}

func (fake *FakeConfig) SetDeploymentCallCount() int {
	fake.setDeploymentMutex.RLock()
	defer fake.setDeploymentMutex.RUnlock()
	return len(fake.setDeploymentArgsForCall)
}

func (fake *FakeConfig) SetDeploymentArgsForCall(i int) (string, string) {
	fake.setDeploymentMutex.RLock()
	defer fake.setDeploymentMutex.RUnlock()
	return fake.setDeploymentArgsForCall[i].url, fake.setDeploymentArgsForCall[i].nameOrPath
}

func (fake *FakeConfig) SetDeploymentReturns(result1 config.Config) {
	fake.SetDeploymentStub = nil
	fake.setDeploymentReturns = struct {
		result1 config.Config
	}{result1}
}

func (fake *FakeConfig) Save() error {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct{}{})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub()
	} else {
		return fake.saveReturns.result1
	}
}

func (fake *FakeConfig) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeConfig) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

var _ config.Config = new(FakeConfig)
