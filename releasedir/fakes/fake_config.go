// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/releasedir"
)

type FakeConfig struct {
	FinalNameStub        func() (string, error)
	finalNameMutex       sync.RWMutex
	finalNameArgsForCall []struct{}
	finalNameReturns     struct {
		result1 string
		result2 error
	}
	SaveFinalNameStub        func(string) error
	saveFinalNameMutex       sync.RWMutex
	saveFinalNameArgsForCall []struct {
		arg1 string
	}
	saveFinalNameReturns struct {
		result1 error
	}
	BlobstoreStub        func() (string, map[string]interface{}, error)
	blobstoreMutex       sync.RWMutex
	blobstoreArgsForCall []struct{}
	blobstoreReturns     struct {
		result1 string
		result2 map[string]interface{}
		result3 error
	}
}

func (fake *FakeConfig) FinalName() (string, error) {
	fake.finalNameMutex.Lock()
	fake.finalNameArgsForCall = append(fake.finalNameArgsForCall, struct{}{})
	fake.finalNameMutex.Unlock()
	if fake.FinalNameStub != nil {
		return fake.FinalNameStub()
	} else {
		return fake.finalNameReturns.result1, fake.finalNameReturns.result2
	}
}

func (fake *FakeConfig) FinalNameCallCount() int {
	fake.finalNameMutex.RLock()
	defer fake.finalNameMutex.RUnlock()
	return len(fake.finalNameArgsForCall)
}

func (fake *FakeConfig) FinalNameReturns(result1 string, result2 error) {
	fake.FinalNameStub = nil
	fake.finalNameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeConfig) SaveFinalName(arg1 string) error {
	fake.saveFinalNameMutex.Lock()
	fake.saveFinalNameArgsForCall = append(fake.saveFinalNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.saveFinalNameMutex.Unlock()
	if fake.SaveFinalNameStub != nil {
		return fake.SaveFinalNameStub(arg1)
	} else {
		return fake.saveFinalNameReturns.result1
	}
}

func (fake *FakeConfig) SaveFinalNameCallCount() int {
	fake.saveFinalNameMutex.RLock()
	defer fake.saveFinalNameMutex.RUnlock()
	return len(fake.saveFinalNameArgsForCall)
}

func (fake *FakeConfig) SaveFinalNameArgsForCall(i int) string {
	fake.saveFinalNameMutex.RLock()
	defer fake.saveFinalNameMutex.RUnlock()
	return fake.saveFinalNameArgsForCall[i].arg1
}

func (fake *FakeConfig) SaveFinalNameReturns(result1 error) {
	fake.SaveFinalNameStub = nil
	fake.saveFinalNameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfig) Blobstore() (string, map[string]interface{}, error) {
	fake.blobstoreMutex.Lock()
	fake.blobstoreArgsForCall = append(fake.blobstoreArgsForCall, struct{}{})
	fake.blobstoreMutex.Unlock()
	if fake.BlobstoreStub != nil {
		return fake.BlobstoreStub()
	} else {
		return fake.blobstoreReturns.result1, fake.blobstoreReturns.result2, fake.blobstoreReturns.result3
	}
}

func (fake *FakeConfig) BlobstoreCallCount() int {
	fake.blobstoreMutex.RLock()
	defer fake.blobstoreMutex.RUnlock()
	return len(fake.blobstoreArgsForCall)
}

func (fake *FakeConfig) BlobstoreReturns(result1 string, result2 map[string]interface{}, result3 error) {
	fake.BlobstoreStub = nil
	fake.blobstoreReturns = struct {
		result1 string
		result2 map[string]interface{}
		result3 error
	}{result1, result2, result3}
}

var _ releasedir.Config = new(FakeConfig)
