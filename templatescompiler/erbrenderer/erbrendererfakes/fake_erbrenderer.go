// This file was generated by counterfeiter
package erbrendererfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/templatescompiler/erbrenderer"
)

type FakeERBRenderer struct {
	RenderStub        func(srcPath, dstPath string, context erbrenderer.TemplateEvaluationContext) error
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
		srcPath string
		dstPath string
		context erbrenderer.TemplateEvaluationContext
	}
	renderReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeERBRenderer) Render(srcPath string, dstPath string, context erbrenderer.TemplateEvaluationContext) error {
	fake.renderMutex.Lock()
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
		srcPath string
		dstPath string
		context erbrenderer.TemplateEvaluationContext
	}{srcPath, dstPath, context})
	fake.recordInvocation("Render", []interface{}{srcPath, dstPath, context})
	fake.renderMutex.Unlock()
	if fake.RenderStub != nil {
		return fake.RenderStub(srcPath, dstPath, context)
	} else {
		return fake.renderReturns.result1
	}
}

func (fake *FakeERBRenderer) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeERBRenderer) RenderArgsForCall(i int) (string, string, erbrenderer.TemplateEvaluationContext) {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return fake.renderArgsForCall[i].srcPath, fake.renderArgsForCall[i].dstPath, fake.renderArgsForCall[i].context
}

func (fake *FakeERBRenderer) RenderReturns(result1 error) {
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeERBRenderer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeERBRenderer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ erbrenderer.ERBRenderer = new(FakeERBRenderer)
