// This file was generated by counterfeiter
package cryptofakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/crypto"
)

type FakeSHA1Calculator struct {
	CalculateStub        func(string) (string, error)
	calculateMutex       sync.RWMutex
	calculateArgsForCall []struct {
		arg1 string
	}
	calculateReturns struct {
		result1 string
		result2 error
	}
	CalculateStringStub        func(string) string
	calculateStringMutex       sync.RWMutex
	calculateStringArgsForCall []struct {
		arg1 string
	}
	calculateStringReturns struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSHA1Calculator) Calculate(arg1 string) (string, error) {
	fake.calculateMutex.Lock()
	fake.calculateArgsForCall = append(fake.calculateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Calculate", []interface{}{arg1})
	fake.calculateMutex.Unlock()
	if fake.CalculateStub != nil {
		return fake.CalculateStub(arg1)
	} else {
		return fake.calculateReturns.result1, fake.calculateReturns.result2
	}
}

func (fake *FakeSHA1Calculator) CalculateCallCount() int {
	fake.calculateMutex.RLock()
	defer fake.calculateMutex.RUnlock()
	return len(fake.calculateArgsForCall)
}

func (fake *FakeSHA1Calculator) CalculateArgsForCall(i int) string {
	fake.calculateMutex.RLock()
	defer fake.calculateMutex.RUnlock()
	return fake.calculateArgsForCall[i].arg1
}

func (fake *FakeSHA1Calculator) CalculateReturns(result1 string, result2 error) {
	fake.CalculateStub = nil
	fake.calculateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSHA1Calculator) CalculateString(arg1 string) string {
	fake.calculateStringMutex.Lock()
	fake.calculateStringArgsForCall = append(fake.calculateStringArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CalculateString", []interface{}{arg1})
	fake.calculateStringMutex.Unlock()
	if fake.CalculateStringStub != nil {
		return fake.CalculateStringStub(arg1)
	} else {
		return fake.calculateStringReturns.result1
	}
}

func (fake *FakeSHA1Calculator) CalculateStringCallCount() int {
	fake.calculateStringMutex.RLock()
	defer fake.calculateStringMutex.RUnlock()
	return len(fake.calculateStringArgsForCall)
}

func (fake *FakeSHA1Calculator) CalculateStringArgsForCall(i int) string {
	fake.calculateStringMutex.RLock()
	defer fake.calculateStringMutex.RUnlock()
	return fake.calculateStringArgsForCall[i].arg1
}

func (fake *FakeSHA1Calculator) CalculateStringReturns(result1 string) {
	fake.CalculateStringStub = nil
	fake.calculateStringReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSHA1Calculator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.calculateMutex.RLock()
	defer fake.calculateMutex.RUnlock()
	fake.calculateStringMutex.RLock()
	defer fake.calculateStringMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSHA1Calculator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ crypto.SHA1Calculator = new(FakeSHA1Calculator)
