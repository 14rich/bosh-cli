// This file was generated by counterfeiter
package vmfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/cloud"
	"github.com/cloudfoundry/bosh-cli/deployment/disk"
	"github.com/cloudfoundry/bosh-cli/deployment/manifest"
	"github.com/cloudfoundry/bosh-cli/deployment/vm"
	"github.com/cloudfoundry/bosh-cli/ui"
)

type FakeDiskDeployer struct {
	DeployStub        func(diskPool manifest.DiskPool, cloud cloud.Cloud, vm vm.VM, eventLoggerStage ui.Stage) ([]disk.Disk, error)
	deployMutex       sync.RWMutex
	deployArgsForCall []struct {
		diskPool         manifest.DiskPool
		cloud            cloud.Cloud
		vm               vm.VM
		eventLoggerStage ui.Stage
	}
	deployReturns struct {
		result1 []disk.Disk
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDiskDeployer) Deploy(diskPool manifest.DiskPool, cloud cloud.Cloud, vm vm.VM, eventLoggerStage ui.Stage) ([]disk.Disk, error) {
	fake.deployMutex.Lock()
	fake.deployArgsForCall = append(fake.deployArgsForCall, struct {
		diskPool         manifest.DiskPool
		cloud            cloud.Cloud
		vm               vm.VM
		eventLoggerStage ui.Stage
	}{diskPool, cloud, vm, eventLoggerStage})
	fake.recordInvocation("Deploy", []interface{}{diskPool, cloud, vm, eventLoggerStage})
	fake.deployMutex.Unlock()
	if fake.DeployStub != nil {
		return fake.DeployStub(diskPool, cloud, vm, eventLoggerStage)
	} else {
		return fake.deployReturns.result1, fake.deployReturns.result2
	}
}

func (fake *FakeDiskDeployer) DeployCallCount() int {
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	return len(fake.deployArgsForCall)
}

func (fake *FakeDiskDeployer) DeployArgsForCall(i int) (manifest.DiskPool, cloud.Cloud, vm.VM, ui.Stage) {
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	return fake.deployArgsForCall[i].diskPool, fake.deployArgsForCall[i].cloud, fake.deployArgsForCall[i].vm, fake.deployArgsForCall[i].eventLoggerStage
}

func (fake *FakeDiskDeployer) DeployReturns(result1 []disk.Disk, result2 error) {
	fake.DeployStub = nil
	fake.deployReturns = struct {
		result1 []disk.Disk
		result2 error
	}{result1, result2}
}

func (fake *FakeDiskDeployer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDiskDeployer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vm.DiskDeployer = new(FakeDiskDeployer)
