// This file was generated by counterfeiter
package vmfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/deployment/manifest"
	"github.com/cloudfoundry/bosh-cli/deployment/vm"
	"github.com/cloudfoundry/bosh-cli/stemcell"
)

type FakeManager struct {
	FindCurrentStub        func() (vm.VM, bool, error)
	findCurrentMutex       sync.RWMutex
	findCurrentArgsForCall []struct{}
	findCurrentReturns     struct {
		result1 vm.VM
		result2 bool
		result3 error
	}
	CreateStub        func(stemcell.CloudStemcell, manifest.Manifest) (vm.VM, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 stemcell.CloudStemcell
		arg2 manifest.Manifest
	}
	createReturns struct {
		result1 vm.VM
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) FindCurrent() (vm.VM, bool, error) {
	fake.findCurrentMutex.Lock()
	fake.findCurrentArgsForCall = append(fake.findCurrentArgsForCall, struct{}{})
	fake.recordInvocation("FindCurrent", []interface{}{})
	fake.findCurrentMutex.Unlock()
	if fake.FindCurrentStub != nil {
		return fake.FindCurrentStub()
	} else {
		return fake.findCurrentReturns.result1, fake.findCurrentReturns.result2, fake.findCurrentReturns.result3
	}
}

func (fake *FakeManager) FindCurrentCallCount() int {
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	return len(fake.findCurrentArgsForCall)
}

func (fake *FakeManager) FindCurrentReturns(result1 vm.VM, result2 bool, result3 error) {
	fake.FindCurrentStub = nil
	fake.findCurrentReturns = struct {
		result1 vm.VM
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeManager) Create(arg1 stemcell.CloudStemcell, arg2 manifest.Manifest) (vm.VM, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 stemcell.CloudStemcell
		arg2 manifest.Manifest
	}{arg1, arg2})
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeManager) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeManager) CreateArgsForCall(i int) (stemcell.CloudStemcell, manifest.Manifest) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1, fake.createArgsForCall[i].arg2
}

func (fake *FakeManager) CreateReturns(result1 vm.VM, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 vm.VM
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vm.Manager = new(FakeManager)
