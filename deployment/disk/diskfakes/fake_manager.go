// This file was generated by counterfeiter
package diskfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/deployment/disk"
	"github.com/cloudfoundry/bosh-cli/deployment/manifest"
	"github.com/cloudfoundry/bosh-cli/ui"
)

type FakeManager struct {
	FindCurrentStub        func() ([]disk.Disk, error)
	findCurrentMutex       sync.RWMutex
	findCurrentArgsForCall []struct{}
	findCurrentReturns     struct {
		result1 []disk.Disk
		result2 error
	}
	CreateStub        func(manifest.DiskPool, string) (disk.Disk, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 manifest.DiskPool
		arg2 string
	}
	createReturns struct {
		result1 disk.Disk
		result2 error
	}
	FindUnusedStub        func() ([]disk.Disk, error)
	findUnusedMutex       sync.RWMutex
	findUnusedArgsForCall []struct{}
	findUnusedReturns     struct {
		result1 []disk.Disk
		result2 error
	}
	DeleteUnusedStub        func(ui.Stage) error
	deleteUnusedMutex       sync.RWMutex
	deleteUnusedArgsForCall []struct {
		arg1 ui.Stage
	}
	deleteUnusedReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) FindCurrent() ([]disk.Disk, error) {
	fake.findCurrentMutex.Lock()
	fake.findCurrentArgsForCall = append(fake.findCurrentArgsForCall, struct{}{})
	fake.recordInvocation("FindCurrent", []interface{}{})
	fake.findCurrentMutex.Unlock()
	if fake.FindCurrentStub != nil {
		return fake.FindCurrentStub()
	} else {
		return fake.findCurrentReturns.result1, fake.findCurrentReturns.result2
	}
}

func (fake *FakeManager) FindCurrentCallCount() int {
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	return len(fake.findCurrentArgsForCall)
}

func (fake *FakeManager) FindCurrentReturns(result1 []disk.Disk, result2 error) {
	fake.FindCurrentStub = nil
	fake.findCurrentReturns = struct {
		result1 []disk.Disk
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Create(arg1 manifest.DiskPool, arg2 string) (disk.Disk, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 manifest.DiskPool
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeManager) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeManager) CreateArgsForCall(i int) (manifest.DiskPool, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1, fake.createArgsForCall[i].arg2
}

func (fake *FakeManager) CreateReturns(result1 disk.Disk, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 disk.Disk
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) FindUnused() ([]disk.Disk, error) {
	fake.findUnusedMutex.Lock()
	fake.findUnusedArgsForCall = append(fake.findUnusedArgsForCall, struct{}{})
	fake.recordInvocation("FindUnused", []interface{}{})
	fake.findUnusedMutex.Unlock()
	if fake.FindUnusedStub != nil {
		return fake.FindUnusedStub()
	} else {
		return fake.findUnusedReturns.result1, fake.findUnusedReturns.result2
	}
}

func (fake *FakeManager) FindUnusedCallCount() int {
	fake.findUnusedMutex.RLock()
	defer fake.findUnusedMutex.RUnlock()
	return len(fake.findUnusedArgsForCall)
}

func (fake *FakeManager) FindUnusedReturns(result1 []disk.Disk, result2 error) {
	fake.FindUnusedStub = nil
	fake.findUnusedReturns = struct {
		result1 []disk.Disk
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) DeleteUnused(arg1 ui.Stage) error {
	fake.deleteUnusedMutex.Lock()
	fake.deleteUnusedArgsForCall = append(fake.deleteUnusedArgsForCall, struct {
		arg1 ui.Stage
	}{arg1})
	fake.recordInvocation("DeleteUnused", []interface{}{arg1})
	fake.deleteUnusedMutex.Unlock()
	if fake.DeleteUnusedStub != nil {
		return fake.DeleteUnusedStub(arg1)
	} else {
		return fake.deleteUnusedReturns.result1
	}
}

func (fake *FakeManager) DeleteUnusedCallCount() int {
	fake.deleteUnusedMutex.RLock()
	defer fake.deleteUnusedMutex.RUnlock()
	return len(fake.deleteUnusedArgsForCall)
}

func (fake *FakeManager) DeleteUnusedArgsForCall(i int) ui.Stage {
	fake.deleteUnusedMutex.RLock()
	defer fake.deleteUnusedMutex.RUnlock()
	return fake.deleteUnusedArgsForCall[i].arg1
}

func (fake *FakeManager) DeleteUnusedReturns(result1 error) {
	fake.DeleteUnusedStub = nil
	fake.deleteUnusedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.findUnusedMutex.RLock()
	defer fake.findUnusedMutex.RUnlock()
	fake.deleteUnusedMutex.RLock()
	defer fake.deleteUnusedMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ disk.Manager = new(FakeManager)
