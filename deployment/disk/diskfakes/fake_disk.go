// This file was generated by counterfeiter
package diskfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/deployment/disk"
	"github.com/cloudfoundry/bosh-utils/property"
)

type FakeDisk struct {
	CIDStub        func() string
	cIDMutex       sync.RWMutex
	cIDArgsForCall []struct{}
	cIDReturns     struct {
		result1 string
	}
	NeedsMigrationStub        func(newSize int, newCloudProperties property.Map) bool
	needsMigrationMutex       sync.RWMutex
	needsMigrationArgsForCall []struct {
		newSize            int
		newCloudProperties property.Map
	}
	needsMigrationReturns struct {
		result1 bool
	}
	DeleteStub        func() error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct{}
	deleteReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDisk) CID() string {
	fake.cIDMutex.Lock()
	fake.cIDArgsForCall = append(fake.cIDArgsForCall, struct{}{})
	fake.recordInvocation("CID", []interface{}{})
	fake.cIDMutex.Unlock()
	if fake.CIDStub != nil {
		return fake.CIDStub()
	} else {
		return fake.cIDReturns.result1
	}
}

func (fake *FakeDisk) CIDCallCount() int {
	fake.cIDMutex.RLock()
	defer fake.cIDMutex.RUnlock()
	return len(fake.cIDArgsForCall)
}

func (fake *FakeDisk) CIDReturns(result1 string) {
	fake.CIDStub = nil
	fake.cIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDisk) NeedsMigration(newSize int, newCloudProperties property.Map) bool {
	fake.needsMigrationMutex.Lock()
	fake.needsMigrationArgsForCall = append(fake.needsMigrationArgsForCall, struct {
		newSize            int
		newCloudProperties property.Map
	}{newSize, newCloudProperties})
	fake.recordInvocation("NeedsMigration", []interface{}{newSize, newCloudProperties})
	fake.needsMigrationMutex.Unlock()
	if fake.NeedsMigrationStub != nil {
		return fake.NeedsMigrationStub(newSize, newCloudProperties)
	} else {
		return fake.needsMigrationReturns.result1
	}
}

func (fake *FakeDisk) NeedsMigrationCallCount() int {
	fake.needsMigrationMutex.RLock()
	defer fake.needsMigrationMutex.RUnlock()
	return len(fake.needsMigrationArgsForCall)
}

func (fake *FakeDisk) NeedsMigrationArgsForCall(i int) (int, property.Map) {
	fake.needsMigrationMutex.RLock()
	defer fake.needsMigrationMutex.RUnlock()
	return fake.needsMigrationArgsForCall[i].newSize, fake.needsMigrationArgsForCall[i].newCloudProperties
}

func (fake *FakeDisk) NeedsMigrationReturns(result1 bool) {
	fake.NeedsMigrationStub = nil
	fake.needsMigrationReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeDisk) Delete() error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct{}{})
	fake.recordInvocation("Delete", []interface{}{})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub()
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeDisk) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeDisk) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDisk) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cIDMutex.RLock()
	defer fake.cIDMutex.RUnlock()
	fake.needsMigrationMutex.RLock()
	defer fake.needsMigrationMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDisk) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ disk.Disk = new(FakeDisk)
