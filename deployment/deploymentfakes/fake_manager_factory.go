// This file was generated by counterfeiter
package deploymentfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-agent/agentclient"
	"github.com/cloudfoundry/bosh-cli/blobstore"
	"github.com/cloudfoundry/bosh-cli/cloud"
	"github.com/cloudfoundry/bosh-cli/deployment"
)

type FakeManagerFactory struct {
	NewManagerStub        func(cloud.Cloud, agentclient.AgentClient, blobstore.Blobstore) deployment.Manager
	newManagerMutex       sync.RWMutex
	newManagerArgsForCall []struct {
		arg1 cloud.Cloud
		arg2 agentclient.AgentClient
		arg3 blobstore.Blobstore
	}
	newManagerReturns struct {
		result1 deployment.Manager
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManagerFactory) NewManager(arg1 cloud.Cloud, arg2 agentclient.AgentClient, arg3 blobstore.Blobstore) deployment.Manager {
	fake.newManagerMutex.Lock()
	fake.newManagerArgsForCall = append(fake.newManagerArgsForCall, struct {
		arg1 cloud.Cloud
		arg2 agentclient.AgentClient
		arg3 blobstore.Blobstore
	}{arg1, arg2, arg3})
	fake.recordInvocation("NewManager", []interface{}{arg1, arg2, arg3})
	fake.newManagerMutex.Unlock()
	if fake.NewManagerStub != nil {
		return fake.NewManagerStub(arg1, arg2, arg3)
	} else {
		return fake.newManagerReturns.result1
	}
}

func (fake *FakeManagerFactory) NewManagerCallCount() int {
	fake.newManagerMutex.RLock()
	defer fake.newManagerMutex.RUnlock()
	return len(fake.newManagerArgsForCall)
}

func (fake *FakeManagerFactory) NewManagerArgsForCall(i int) (cloud.Cloud, agentclient.AgentClient, blobstore.Blobstore) {
	fake.newManagerMutex.RLock()
	defer fake.newManagerMutex.RUnlock()
	return fake.newManagerArgsForCall[i].arg1, fake.newManagerArgsForCall[i].arg2, fake.newManagerArgsForCall[i].arg3
}

func (fake *FakeManagerFactory) NewManagerReturns(result1 deployment.Manager) {
	fake.NewManagerStub = nil
	fake.newManagerReturns = struct {
		result1 deployment.Manager
	}{result1}
}

func (fake *FakeManagerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newManagerMutex.RLock()
	defer fake.newManagerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManagerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ deployment.ManagerFactory = new(FakeManagerFactory)
