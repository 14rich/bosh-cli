// This file was generated by counterfeiter
package deploymentfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/blobstore"
	"github.com/cloudfoundry/bosh-cli/cloud"
	"github.com/cloudfoundry/bosh-cli/deployment"
	"github.com/cloudfoundry/bosh-cli/deployment/manifest"
	"github.com/cloudfoundry/bosh-cli/deployment/vm"
	manifestinstallation "github.com/cloudfoundry/bosh-cli/installation/manifest"
	"github.com/cloudfoundry/bosh-cli/stemcell"
	"github.com/cloudfoundry/bosh-cli/ui"
)

type FakeDeployer struct {
	DeployStub        func(cloud.Cloud, manifest.Manifest, stemcell.CloudStemcell, manifestinstallation.Registry, vm.Manager, blobstore.Blobstore, ui.Stage) (deployment.Deployment, error)
	deployMutex       sync.RWMutex
	deployArgsForCall []struct {
		arg1 cloud.Cloud
		arg2 manifest.Manifest
		arg3 stemcell.CloudStemcell
		arg4 manifestinstallation.Registry
		arg5 vm.Manager
		arg6 blobstore.Blobstore
		arg7 ui.Stage
	}
	deployReturns struct {
		result1 deployment.Deployment
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeployer) Deploy(arg1 cloud.Cloud, arg2 manifest.Manifest, arg3 stemcell.CloudStemcell, arg4 manifestinstallation.Registry, arg5 vm.Manager, arg6 blobstore.Blobstore, arg7 ui.Stage) (deployment.Deployment, error) {
	fake.deployMutex.Lock()
	fake.deployArgsForCall = append(fake.deployArgsForCall, struct {
		arg1 cloud.Cloud
		arg2 manifest.Manifest
		arg3 stemcell.CloudStemcell
		arg4 manifestinstallation.Registry
		arg5 vm.Manager
		arg6 blobstore.Blobstore
		arg7 ui.Stage
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.recordInvocation("Deploy", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.deployMutex.Unlock()
	if fake.DeployStub != nil {
		return fake.DeployStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	} else {
		return fake.deployReturns.result1, fake.deployReturns.result2
	}
}

func (fake *FakeDeployer) DeployCallCount() int {
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	return len(fake.deployArgsForCall)
}

func (fake *FakeDeployer) DeployArgsForCall(i int) (cloud.Cloud, manifest.Manifest, stemcell.CloudStemcell, manifestinstallation.Registry, vm.Manager, blobstore.Blobstore, ui.Stage) {
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	return fake.deployArgsForCall[i].arg1, fake.deployArgsForCall[i].arg2, fake.deployArgsForCall[i].arg3, fake.deployArgsForCall[i].arg4, fake.deployArgsForCall[i].arg5, fake.deployArgsForCall[i].arg6, fake.deployArgsForCall[i].arg7
}

func (fake *FakeDeployer) DeployReturns(result1 deployment.Deployment, result2 error) {
	fake.DeployStub = nil
	fake.deployReturns = struct {
		result1 deployment.Deployment
		result2 error
	}{result1, result2}
}

func (fake *FakeDeployer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDeployer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ deployment.Deployer = new(FakeDeployer)
