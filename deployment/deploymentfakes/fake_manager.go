// This file was generated by counterfeiter
package deploymentfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/deployment"
	"github.com/cloudfoundry/bosh-cli/ui"
)

type FakeManager struct {
	FindCurrentStub        func() (deployment deployment.Deployment, found bool, err error)
	findCurrentMutex       sync.RWMutex
	findCurrentArgsForCall []struct{}
	findCurrentReturns     struct {
		result1 deployment.Deployment
		result2 bool
		result3 error
	}
	CleanupStub        func(ui.Stage) error
	cleanupMutex       sync.RWMutex
	cleanupArgsForCall []struct {
		arg1 ui.Stage
	}
	cleanupReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) FindCurrent() (deployment deployment.Deployment, found bool, err error) {
	fake.findCurrentMutex.Lock()
	fake.findCurrentArgsForCall = append(fake.findCurrentArgsForCall, struct{}{})
	fake.recordInvocation("FindCurrent", []interface{}{})
	fake.findCurrentMutex.Unlock()
	if fake.FindCurrentStub != nil {
		return fake.FindCurrentStub()
	} else {
		return fake.findCurrentReturns.result1, fake.findCurrentReturns.result2, fake.findCurrentReturns.result3
	}
}

func (fake *FakeManager) FindCurrentCallCount() int {
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	return len(fake.findCurrentArgsForCall)
}

func (fake *FakeManager) FindCurrentReturns(result1 deployment.Deployment, result2 bool, result3 error) {
	fake.FindCurrentStub = nil
	fake.findCurrentReturns = struct {
		result1 deployment.Deployment
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeManager) Cleanup(arg1 ui.Stage) error {
	fake.cleanupMutex.Lock()
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct {
		arg1 ui.Stage
	}{arg1})
	fake.recordInvocation("Cleanup", []interface{}{arg1})
	fake.cleanupMutex.Unlock()
	if fake.CleanupStub != nil {
		return fake.CleanupStub(arg1)
	} else {
		return fake.cleanupReturns.result1
	}
}

func (fake *FakeManager) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *FakeManager) CleanupArgsForCall(i int) ui.Stage {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return fake.cleanupArgsForCall[i].arg1
}

func (fake *FakeManager) CleanupReturns(result1 error) {
	fake.CleanupStub = nil
	fake.cleanupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findCurrentMutex.RLock()
	defer fake.findCurrentMutex.RUnlock()
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ deployment.Manager = new(FakeManager)
